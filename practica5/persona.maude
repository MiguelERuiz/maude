fmod PERSONA is
  pr STRING .

  sorts Persona Estado .

  *** Declaracion de los tipos de estado en los que se puede
  *** encontrar una persona
  ops relajado trabajando ebrio cansado-pero-contento humillado satisfecho : -> Estado [ctor] .

  *** Declaracion del tipo Persona (generica)
  --- p(Nombre::Str, Edad::Nat, E::Estado, NumCopas::Nat, NumRefrescos::Nat, Dinero::Nat, TieneEntrada?::Bool)
  op p : String Nat Estado Nat Nat Nat Bool -> Persona [ctor] .

  *** Billy el relaciones
  --- billy(Nombre::Str, E::Estado, NumEntradas::Nat, PrecioEntrada::Nat)
  op billy : String Estado Nat Nat -> Persona [ctor] .

  *** Bokencio el puerta
  --- bokencio(Nombre::Str, E::Estado, Dinero::Nat)
  op bokencio : String Estado Nat -> Persona [ctor] .

  *** Declaracion de variables
  var P : Persona .
  vars N N' : String .
  vars A A' : Nat .
  vars NC NC' NR NR' : Nat .
  vars D D' : Nat .
  var NE : Nat .
  vars TE TE' : Bool .
  vars E E' : Estado .

  *** Verifica que una persona no es ni Billy ni Bokencio
  op es-persona-generica : Persona -> Bool .
  eq es-persona-generica(p(N, A, E, NC, NR, D, TE)) = true .
  eq es-persona-generica(P) = false [owise] .

  *** Devuelve la edad de una persona
  op edad : Persona ~> Nat .
  eq edad(p(N, A, E, NC, NR, D, TE)) = A .

  *** Verifica que si una persona es mayor de edad
  op es-mayor-de-edad : Persona -> Bool .
  eq es-mayor-de-edad(P) = edad(P) >= 18 .

  *** Verifica que una persona tiene entrada
  op tiene-entrada : Persona -> Bool .
  eq tiene-entrada(p(N, A, E, NC, NR, D, TE)) = TE .
  eq tiene-entrada(P) = false [owise] .

  *** Definición del concepto de ordenación de persona tomando
  *** como criterio el dinero que lleva encima
  ops _<=_ _>_ : Persona Persona -> Bool .
  eq p(N, A, E, NC, NR, D, TE) <= p(N', A', E', NC', NR', D', TE') = D <= D' .
  eq p(N, A, E, NC, NR, D, TE) > p(N', A', E', NC', NR', D', TE') = D > D' .

  --- Personas de ejemplo aka mis amig@s :D
  ops js nacho fer eti ire pp alex andrea billy bokencio : -> Persona .
  ops js nacho fer eti ire pp alex andrea : -> Persona .
  eq js = p("Jotas", 22, relajado, 0, 0, 150, false) .
  eq nacho = p("Nacho", 28, relajado, 0, 0, 140, false) .
  eq fer = p("Fer", 35, relajado, 0, 0, 50, false) .
  eq eti = p("Eti", 34, relajado, 0, 0, 160, true) .
  eq ire = p("Ire", 27, relajado, 0, 0, 130, false) .
  eq pp = p("Pepe", 17, relajado, 0, 0, 70, false) .
  eq alex = p("Alex", 21, relajado, 0, 0, 180, false) .
  eq andrea = p("Andrea", 23, relajado, 0, 0, 180, false) .
  eq bokencio = bokencio("Bokencio el puerta", trabajando, 100) .

endfm

red es-persona-generica(nacho) .
red not es-persona-generica(billy) .
red not es-persona-generica(bokencio) .
red edad(ire) == 27 .
red not es-mayor-de-edad(pp) .
red tiene-entrada(eti) .
red not tiene-entrada(billy) .
red nacho > pp .
red not alex <= andrea .